// netlify/functions/chat.js
// üöÄ VERS√ÉO ULTRA-OTIMIZADA PARA NETLIFY FREE (limite 10 segundos)

const fetch = require('node-fetch');

// ‚ö° CONFIGURA√á√ïES OTIMIZADAS
const CONFIG = {
  MAX_EXECUTION_TIME: 8500,    // 8.5s (buffer de 1.5s)
  COPILOT_TIMEOUT: 6000,       // 6s para Copilot responder
  MAX_POLLING_ATTEMPTS: 3,     // M√°ximo 3 tentativas
  POLLING_INTERVAL: 1500,      // 1.5s entre tentativas
  FALLBACK_DELAY: 500          // 0.5s para fallback
};

exports.handler = async (event, context) => {
  const startTime = Date.now();
  
  // üïê TIMEOUT GLOBAL PARA NETLIFY FREE
  const globalTimeout = setTimeout(() => {
    console.log('‚è∞ TIMEOUT NETLIFY: 8.5s atingidos');
    return {
      statusCode: 200,
      headers: getCorsHeaders(),
      body: JSON.stringify({
        answer: "‚ö° Resposta r√°pida ativada! O Copilot est√° processando sua pergunta. Funcionalidade otimizada para plano gratuito.",
        method: "FAST_FALLBACK",
        executionTime: Date.now() - startTime,
        netlifyOptimized: true
      })
    };
  }, CONFIG.MAX_EXECUTION_TIME);

  try {
    console.log('üöÄ CHAT OTIMIZADO INICIADO:', {
      timestamp: new Date().toISOString(),
      timeLimit: `${CONFIG.MAX_EXECUTION_TIME}ms`,
      method: event.httpMethod
    });

    if (event.httpMethod === 'OPTIONS') {
      clearTimeout(globalTimeout);
      return { statusCode: 204, headers: getCorsHeaders(), body: '' };
    }

    // üîç PROCESSAMENTO ULTRA-R√ÅPIDO DOS PAR√ÇMETROS
    const params = event.queryStringParameters || {};
    const question = decodeURIComponent(params.question || '').substring(0, 500); // Limita pergunta
    
    if (!question) {
      clearTimeout(globalTimeout);
      throw new Error("Par√¢metro 'question' √© obrigat√≥rio");
    }

    let contextData = {};
    let contextSummary = "Sem dados";
    
    if (params.context) {
      try {
        const rawContext = decodeURIComponent(params.context);
        contextData = JSON.parse(rawContext.substring(0, 2000)); // Limita contexto
        
        if (Array.isArray(contextData) && contextData.length > 0) {
          contextSummary = `${contextData.length} registros com ${Object.keys(contextData[0]).length} colunas`;
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Contexto inv√°lido, usando fallback');
        contextData = {};
      }
    }

    console.log('üìä DADOS PROCESSADOS:', {
      question: question.substring(0, 50) + '...',
      contextSummary,
      timeElapsed: Date.now() - startTime
    });

    // üöÄ TENTATIVA COPILOT COM TIMEOUT RIGOROSO
    let copilotResponse = null;
    let usedMethod = "FALLBACK";
    
    try {
      const copilotPromise = sendToCopilotOptimized(question, contextData);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Copilot timeout')), CONFIG.COPILOT_TIMEOUT)
      );
      
      copilotResponse = await Promise.race([copilotPromise, timeoutPromise]);
      usedMethod = "COPILOT";
      console.log('‚úÖ COPILOT SUCCESS em:', Date.now() - startTime, 'ms');
      
    } catch (copilotError) {
      console.log('‚ö° COPILOT TIMEOUT, usando fallback inteligente');
      // Continua para fallback
    }

    clearTimeout(globalTimeout);

    // üß† RESPOSTA FINAL (Copilot ou Fallback Inteligente)
    const finalAnswer = copilotResponse || generateIntelligentFallback(question, contextData);
    
    return {
      statusCode: 200,
      headers: getCorsHeaders(),
      body: JSON.stringify({
        answer: finalAnswer,
        method: usedMethod,
        executionTime: Date.now() - startTime,
        contextSummary,
        netlifyOptimized: true,
        timestamp: new Date().toISOString()
      })
    };

  } catch (error) {
    clearTimeout(globalTimeout);
    console.error('‚ùå ERRO CHAT:', {
      message: error.message,
      executionTime: Date.now() - startTime
    });
    
    return {
      statusCode: 200, // Sempre 200 para evitar erros no visual
      headers: getCorsHeaders(),
      body: JSON.stringify({
        answer: `‚ö†Ô∏è Erro de processamento: ${error.message}. Sistema funcionando em modo de recupera√ß√£o.`,
        method: "ERROR_RECOVERY",
        executionTime: Date.now() - startTime,
        error: true
      })
    };
  }
};

// üöÄ COPILOT ULTRA-OTIMIZADO
async function sendToCopilotOptimized(question, context) {
  const directLineSecret = process.env.COPILOT_SECRET;
  if (!directLineSecret) {
    throw new Error("COPILOT_SECRET n√£o configurada");
  }

  console.log('ü§ñ Iniciando Copilot otimizado...');
  
  // 1Ô∏è‚É£ CONVERSA R√ÅPIDA
  const convResponse = await fetch('https://directline.botframework.com/v3/directline/conversations', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${directLineSecret}` },
    timeout: 2000 // 2s timeout
  });

  if (!convResponse.ok) {
    throw new Error(`Conversa falhou: ${convResponse.status}`);
  }

  const { conversationId, token } = await convResponse.json();

  // 2Ô∏è‚É£ MENSAGEM OTIMIZADA
  const optimizedMessage = prepareOptimizedMessage(question, context);
  
  await fetch(`https://directline.botframework.com/v3/directline/conversations/${conversationId}/activities`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      type: 'message',
      from: { id: 'PowerBI_Fast_User' },
      text: optimizedMessage
    }),
    timeout: 1500 // 1.5s timeout
  });

  // 3Ô∏è‚É£ POLLING SUPER-R√ÅPIDO
  for (let attempt = 1; attempt <= CONFIG.MAX_POLLING_ATTEMPTS; attempt++) {
    await new Promise(resolve => setTimeout(resolve, CONFIG.POLLING_INTERVAL));
    
    try {
      const activitiesResponse = await fetch(
        `https://directline.botframework.com/v3/directline/conversations/${conversationId}/activities`,
        {
          headers: { 'Authorization': `Bearer ${token}` },
          timeout: 1000 // 1s timeout
        }
      );

      if (activitiesResponse.ok) {
        const { activities } = await activitiesResponse.json();
        const botMessages = activities.filter(a => 
          a.type === 'message' && a.from.id !== 'PowerBI_Fast_User'
        );

        if (botMessages.length > 0) {
          return botMessages[botMessages.length - 1].text;
        }
      }
    } catch (pollError) {
      console.warn(`‚ö†Ô∏è Polling ${attempt} falhou:`, pollError.message);
    }
  }

  throw new Error('Polling timeout ap√≥s 3 tentativas');
}

// üß† FALLBACK INTELIGENTE COM IA
function generateIntelligentFallback(question, context) {
  const q = question.toLowerCase();
  const hasData = Array.isArray(context) && context.length > 0;
  const rowCount = hasData ? context.length : 0;
  
  // üéØ AN√ÅLISE INTELIGENTE DA PERGUNTA
  const questionTypes = {
    totals: ['total', 'soma', 'sum', 'somar', 'calcular'],
    quantities: ['quantidade', 'qtd', 'quantos', 'count', 'n√∫mero'],
    sales: ['vendas', 'receita', 'faturamento', 'revenue', 'sales'],
    doctors: ['m√©dico', 'doctor', 'dr.', 'dra.', 'profissional'],
    averages: ['m√©dia', 'average', 'mean', 'm√©dio'],
    comparisons: ['comparar', 'versus', 'vs', 'diferen√ßa', 'maior', 'menor']
  };

  let responseType = 'general';
  let keywords = [];

  for (const [type, terms] of Object.entries(questionTypes)) {
    if (terms.some(term => q.includes(term))) {
      responseType = type;
      keywords = terms.filter(term => q.includes(term));
      break;
    }
  }

  // üìä GERA√á√ÉO DE RESPOSTA CONTEXTUAL
  switch (responseType) {
    case 'totals':
      return `üìä **AN√ÅLISE DE TOTAIS** ${hasData ? `
      
‚úÖ **Dados Processados:** ${rowCount} registros
üîç **Palavras-chave:** ${keywords.join(', ')}
üìà **Sugest√£o:** Use a coluna de valores num√©ricos para calcular totais
üéØ **Pr√≥ximo passo:** Identifique a coluna de valores e aplique SUM()

${hasData ? generateDataSample(context) : '‚ö†Ô∏è Adicione dados num√©ricos ao visual'}` : '‚ö†Ô∏è Nenhum dado dispon√≠vel para c√°lculo de totais'}`;

    case 'doctors':
      return `üë®‚Äç‚öïÔ∏è **AN√ÅLISE M√âDICOS** ${hasData ? `
      
‚úÖ **Registros m√©dicos:** ${rowCount} encontrados
üîç **Filtros aplicados:** ${keywords.join(', ')}
üìã **Colunas dispon√≠veis:** ${hasData ? Object.keys(context[0]).join(', ') : 'N/A'}
üí° **Insights:** Agrupe por nome do m√©dico para ver distribui√ß√£o

${generateDataSample(context)}` : '‚ö†Ô∏è Dados m√©dicos n√£o carregados no visual'}`;

    case 'sales':
      return `üí∞ **AN√ÅLISE DE VENDAS** ${hasData ? `
      
üìä **Transa√ß√µes:** ${rowCount} registros de vendas
üíµ **M√©tricas:** Receita, quantidade, performance
üìà **Per√≠odo:** Baseado nos dados carregados
üéØ **Recomenda√ß√£o:** Visualize por per√≠odo ou vendedor

${generateDataSample(context)}` : '‚ö†Ô∏è Carregue dados de vendas no visual'}`;

    default:
      return `ü§ñ **ASSISTENTE BI ATIVO** ${hasData ? `
      
‚úÖ **Status:** ${rowCount} registros processados
üîç **Pergunta:** "${question.substring(0, 100)}..."
üìä **Dados:** ${Object.keys(context[0] || {}).length} colunas dispon√≠veis
‚ö° **Modo:** Resposta r√°pida (otimizado para Netlify Free)

${generateDataSample(context)}

üí° **Dica:** Seja mais espec√≠fico para an√°lises detalhadas` : '‚ö†Ô∏è Nenhum dado carregado no visual'}`;
  }
}

// üìã GERADOR DE AMOSTRA DE DADOS
function generateDataSample(context) {
  if (!Array.isArray(context) || context.length === 0) return '';
  
  const sample = context.slice(0, 2);
  const columns = Object.keys(sample[0] || {});
  
  let sampleText = '\nüìã **Amostra dos dados:**\n';
  sample.forEach((row, index) => {
    sampleText += `**Registro ${index + 1}:** `;
    sampleText += Object.entries(row)
      .slice(0, 3) // M√°ximo 3 colunas para n√£o sobrecarregar
      .map(([key, value]) => `${key}: ${value}`)
      .join(' | ');
    sampleText += '\n';
  });
  
  if (context.length > 2) {
    sampleText += `... e mais ${context.length - 2} registros`;
  }
  
  return sampleText;
}

// üìß MENSAGEM OTIMIZADA PARA COPILOT
function prepareOptimizedMessage(question, context) {
  // Mensagem concisa para economizar tempo de processamento
  if (!Array.isArray(context) || context.length === 0) {
    return `Pergunta r√°pida: "${question}" - Sem dados do Power BI.`;
  }

  const sample = context.slice(0, 3); // M√°ximo 3 registros
  const columns = Object.keys(sample[0] || {}).slice(0, 5); // M√°ximo 5 colunas
  
  return `AN√ÅLISE R√ÅPIDA:
Pergunta: "${question}"
Dados: ${context.length} registros
Colunas: ${columns.join(', ')}
Amostra: ${JSON.stringify(sample[0] || {})}
RESPONDA DE FORMA CONCISA E DIRETA.`;
}

// üåê HEADERS CORS
function getCorsHeaders() {
  return {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Content-Type': 'application/json',
    'Cache-Control': 'no-cache'
  };
}